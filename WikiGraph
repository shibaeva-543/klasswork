import os
import sys
import math

import array

import statistics



class WikiGraph:

    def load_from_file(self, wiki.txt):
        print('Downloading the graph form file ' + wiki.txt)

        with open(wiki.txt) as fin:
            A = fin.readline().split()
            self.m = int(A[0])
            self.n = int(A[1])
            self._titles = [''] * self.m
            self._sizes = array.array('L', [0]*self.m)
            self._redirect = array.array('B', [0]*self.m)
            self._nlinks = array.array('L', [0]*self.m)
            self._offset = array.array('L', [0]*(self.m+1))
            self._offset[0] = 0
            self._links = array.array('L', [0] * self.n)
            self._popularity = array.array('L', [0] * self.m)
            self._redirectpopularity = array.array('L', [0] * self.m)
            counter = 0
            for i in range(self.m):
                self._titles[i] = fin.readline()
                A = fin.readline().split()
                self._sizes[i] = int(A[0])
                self._redirect[i] = int(A[1])
                self._nlinks[i] = int(A[2])
                self._offset[i + 1] = self._offset[i] + self._nlinks[i]
                for j in range(counter, counter + self._nlinks[i]):
                    self._links[j] = int(fin.readline())
                    if self._redirect[i] == 1:
                        self._redirectpopularity[self._links[j]] += 1
                    else:
                        self._popularity[self._links[j]] += 1
                counter += self._nlinks[i]

          

        print('Downloading completed.')

    def get_number_of_links_from(self, _id):
        return self._nlinks[_id]

    def get_links_from(self, _id):
        return self._links[self._offset[_id]:self._offset[_id + 1]]

    def get_id(self, title):
        flag = False
        i = 0
        while i < self.m and not flag:
            if self._titles[i] != title:
                i += 1
            else:
                flag = True
        return i

    def get_number_of_pages(self):
        return self.m

    def is_redirect(self, _id):
        return self._redirect[_id]

    def get_title(self, _id):
        return self._titles[_id]

    def get_page_size(self, _id):
        return self._sizes[_id]
    

    

G = WikiGraph()

print('print the name of input file')
G.load_from_file(input())

nredirect = G._redirect.count(1)
minlinks = min(G._nlinks)
nminlinks = G._nlinks.count(minlinks)
maxlinks = max(G._nlinks)
nmaxlinks = G._nlinks.count(maxlinks)
#linkfull = ''
midlinks = statistics.mean(G._nlinks)
minpopularity = min(G._popularity)
nminpopularity = G._popularity.count(minpopularity)
maxpopularity = max(G._popularity)
nmaxpopularity = G._popularity.count(maxpopularity)
#popular = ''
midpopularity = statistics.mean(G._popularity)
minredirectpop = min(G._redirectpopularity)
nminredirectpop = G._redirectpopularity.count(minredirectpop)
maxredirectpop = max(G._redirectpopularity)
nmaxredirectpop = G._redirectpopularity.count(maxredirectpop)
#redirectpopular = ''
midredirectpop = statistics.mean(G._redirectpopularity)     


print(nredirect, minlinks, nminlinks, maxlinks, nmaxlinks, midlinks, minpopularity, nminpopularity, maxpopularity, nmaxpopularity, midpopularity, minredirectpop, nminredirectpop, maxredirectpop, nmaxredirectpop, midredirectpop, sep = '\n')
